@model OnlineShop.Models.Product

<div class="product-container" style="background-image: url('@Model.Image');">
    <div class="overlay">
        <div class="items"></div>
        <div class="items head">
            <p>@Model.Name</p>
            <hr>
        </div>
        <div class="items description">
            <p>@Model.Description</p>
        </div>
        <div class="items price">
            <p class="new">ILS @Model.Price</p>
        </div>
        @if (Model.Amount > 0)
        {
            <div class="items quantity">
                <input type="number" id="quantity-@Model.Id" value="1" min="1" max="@Model.Amount">
            </div>
            <div class="items actions">
                <button class="btn btn-add-to-cart" onclick="handleAction(@Model.Id, 'add')"><i class="fa fa-shopping-cart"></i><span>Add to Cart</span></button>
                <button class="btn btn-buy" onclick="handleAction(@Model.Id, 'buy')"><i class="fa fa-bolt"></i><span>Buy Now</span></button>
            </div>
        }
        else
        {
            <div class="items out-of-stock">
                <p>Out of Stock</p>
                <button class="btn btn-notify" onclick="notifyMe(this)">Notify Me</button>
            </div>
            <div class="notify-input" style="display: none;">
                <input type="email" placeholder="Enter your email">
                <button onclick="sendNotification(this)">Submit</button>
            </div>
            <p class="notify-message" style="display: none;">A notification will be sent to your email when the product is available.</p>
        }
    </div>

    <script>
        function notifyMe(button) {
            var notifyInput = button.parentNode.nextElementSibling; // Get the next sibling of the parent node
            notifyInput.style.display = 'block';
            button.style.display = 'none';
        }

        function sendNotification(button) {
            var notifyMessage = button.parentNode.nextElementSibling; // Get the next sibling of the parent node
            notifyMessage.style.display = 'block';
            button.parentNode.style.display = 'none';
        }

        function handleAction(productId, action) {
            var quantityInput = document.getElementById('quantity-' + productId);
            var quantity = parseInt(quantityInput.value);
            var maxQuantity = parseInt(quantityInput.max);

            if (quantity > maxQuantity) {
                alert('Not enough in stock.');
            } else {
                if (action === 'add') {
                    // Add to cart logic here
                    alert('Added ' + quantity + ' item(s) to cart.');
                } else if (action === 'buy') {
                    // Buy now logic here
                    alert('Proceeding to buy ' + quantity + ' item(s).');
                }
            }
        }
    </script>

</div>
